#!/usr/bin/env nix-shell
#!nix-shell -p python3.pkgs.requests python3.pkgs.beautifulsoup4 python3.pkgs.docopt -i python3
"""usage: prison-break [--debug]

the active prison-break connection profile needs to be set via
CONNECTION_FILENAME environment variable
"""
import configparser
from docopt import docopt
from os import environ
from sys import exit
import logging as log
from urllib.request import urlopen
import requests
import urllib
from bs4 import BeautifulSoup as soup

def configure_debug(debug: bool):
    if debug:
        log.basicConfig(level=log.DEBUG)
        from http.client import HTTPConnection
        HTTPConnection.debuglevel = 1
        log.getLogger().setLevel(log.DEBUG)
        requests_log = log.getLogger("requests.packages.urllib3")
        requests_log.setLevel(log.DEBUG)
        requests_log.propagate = True
        log.debug("HTTP debugging enabled")
    else:
        log.basicConfig(level=log.INFO)


plugins = [ ]

def meta_redirect(content: str) -> str:
    parsed = soup(content,features="html.parser")
    log.info(parsed)

    result=parsed.find("meta",attrs={"http-equiv":"refresh"})
    if result:
        wait,text=result["content"].split(";")
        if text.strip().lower().startswith("url="):
            url=text[4:]
            return url
    raise Exception("Cannot find meta redirect in content")


def main():
    args = docopt(__doc__)
    configure_debug(args["--debug"])
    secret_url = "http://krebsco.de/secret" # return 1337
    profile = environ.get('CONNECTION_FILENAME',None)

    if not profile:
        log.error("CONNECTION_FILENAME environment is not set, bailing out")
        print(__doc__)
        exit(1)
    config = configparser.ConfigParser()
    config.read(profile)

    if not 'wifi' in config:
        log.info("Connection is not Wifi, assuming no Captive Portal")
        exit(0)
    elif 'wifi-security' in config:
        log.info("Secured Wifi, assuming no Captive Portal")
        exit(0)
    s = requests.Session()
    s.headers.update( { 'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0' })
    initial_response = s.get(secret_url)

    if initial_response.text.startswith("1337"):
        log.info("Received the correct challenge token, assuming no captive portal")
        exit(0)

    for plug in plugins:
        name= plug.__name__
        if plug(resp,s):
            log.info(f"{name} successful?")
            if s.get(secret_url).text.startswith("1337"):
                log.info(f"{name} successful!")
                exit(0)
            else:
                log.warn(f"{name} failed to break free, continuing")

        else:
            log.info(f"{name} returned False, continuing")
    log.error(f"No plug was able to establish a connection {config['connection']['id']} :(")


# Available plugins
# TODO: pull out into modules instead of adding them as functions here
#       Prerequirement is, that this thing becomes a python module itself which
#       can be installed
def hotsplots(resp: requests.Response, s: requests.Session) -> bool:
    '''
      resp: the initial response of the internet get request
      s: the requests session for opening new http connections
    return True if successful, else False
    '''

    s.headers.update({'Referer':  resp.url})
    data = resp.text

    log.debug(s.headers)
    log.info("Checking for hotsplots Portal")
    if not ("www.hotsplots.de" in data):
      log.info("Cannot find needle 'www.hotsplots.de' in response data")
      return False

    # Create the POST request data from all <form> input
    parsed = soup(data,features="html.parser")
    postdata = {}

    # If this logic stops to work at some point, here are some pointers:
    #   TODO: find the correct form
    #   TODO: detect the correct URL to query based on form path and url
    for inp in parsed.find_all('input'):
        postdata[inp['name']] = inp.get('value','on') # termsOK

    # First Request
    resp = s.post('https://www.hotsplots.de/auth/login.php', data=postdata)
    redirect_url = meta_redirect(resp.text)
    log.info(f"Got Redirected and follow {redirect_url}")
    s.headers.update({'Referer':  resp.url})
    # Second Request
    s.get(redirect_url)
    return True

plugins.append(hotsplots)

if __name__ == "__main__":
    main()

# vim: set filetype=python:
