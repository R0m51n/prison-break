#!/usr/bin/env nix-shell
#!nix-shell -p python3.pkgs.requests python3.pkgs.beautifulsoup4 -i python3
import configparser
from os import environ
from sys import exit
import logging as log
from urllib.request import urlopen
import requests
import urllib
from bs4 import BeautifulSoup as soup

log.basicConfig(level=log.DEBUG)
from http.client import HTTPConnection
HTTPConnection.debuglevel = 1
log.getLogger().setLevel(log.DEBUG)
requests_log = log.getLogger("requests.packages.urllib3")
requests_log.setLevel(log.DEBUG)
requests_log.propagate = True


plugins = [ ]

def meta_redirect(content):
    parsed = soup(content,features="html.parser")

    result=parsed.find("meta",attrs={"http-equiv":"Refresh"})
    if result:
        wait,text=result["content"].split(";")
        if text.strip().lower().startswith("url="):
            url=text[4:]
            return url
    return None

def internet_check(s) -> str:
    ret = s.get('http://krebsco.de/secret')
    # mock:
    #return open('1-redirect.html').read()
    return ret

def main():
    config = configparser.ConfigParser()
    config.read(environ['CONNECTION_FILENAME'])

    if not 'wifi' in config:
        log.info("Connection is not Wifi, assuming no Captive Portal")
        exit(0)
    elif 'wifi-security' in config:
        log.info("Secured Wifi, assuming no Captive Portal")
        exit(0)
    s = requests.Session()
    s.headers.update( { 'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0' })
    resp = internet_check(s)
    data = resp.text
    #data = "WRONG"
    log.debug(f"Response: {data}")
    if data.startswith("1337"):
        log.info("Received the correct challenge token, assuming no captive portal")
        exit(0)

    for plug in plugins:
        name= plug.__name__
        if plug(resp,s):
            log.info(f"{name} successful?")
            if internet_check(s).text.startswith("1337"):
                log.info(f"{name} successful!")
                exit(0)
            else:
                log.warn(f"{name} failed to break free, continuing")

        else:
            log.info(f"{name} returned False, continuing")
    log.error(f"No plug was able to establish a connection {config['connection']['id']} :(")

def hotsplots(resp, s) -> bool:
    '''
      resp: the initial response of the internet get request
      s: the requests session for opening new http connections
    return True if successful, else False
    '''


    s.headers.update({'Referer':  resp.url})
    data = resp.text

    #Mock
    #data = open('1-redirect.html').read()
    print(s.headers)
    log.info("Checking for hotsplots Portal")
    if not ("www.hotsplots.de" in data):
      log.info("Cannot find needle 'www.hotsplots.de' in response data")
      return False

    parsed = soup(data,features="html.parser")
    postdata = {}
    for inp in parsed.find_all('input'):
        postdata[inp['name']] = inp.get('value','on') # termsOK

    resp = s.post('https://www.hotsplots.de/auth/login.php', data=postdata)
    s.get(meta_redirect(resp.text))
    return True

plugins.append(hotsplots)

if __name__ == "__main__":
    main()
